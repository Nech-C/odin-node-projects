extends layout

block content
  div
    button
      a(href='/user/logout') Logout
  h1 Hi #{user.username}!

  div
    input#fileinput(type='file', name='file')
    button#uploadButton Upload
    nav#breadcrumbs
      // Breadcrumbs will be dynamically populated here
    div#content
      ul#folders
        // Folders will be populated here
      ul#files
        // Files will be populated here
  script.
    function fetchFolderContent(folderId) {
      const url = `/api/folder?folderId=${folderId}`;

      // Update the URL to include the folderId as a query parameter
      if (history.pushState) {
        const newurl = window.location.protocol + "//" + window.location.host + window.location.pathname + '?folderId=' + folderId;
        window.history.pushState({ path: newurl }, '', newurl);
      }

      fetch(url)
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          // currentFolderId is now managed through the URL
          updateBreadcrumbs(data.path);
          updateFolders(data.folders);
          updateFiles(data.files);
        })
        .catch(error => {
          console.error('There has been a problem with your fetch operation:', error);
        });
    }

    function updateBreadcrumbs(path) {
      const breadcrumbs = document.getElementById('breadcrumbs');
      breadcrumbs.innerHTML = '';

      path.forEach((crumb, index) => {
        const link = document.createElement('a');
        link.href = `?folderId=${crumb.id}`; // Set the correct query parameter for each breadcrumb
        link.textContent = crumb.name;
        link.addEventListener('click', (event) => {
          event.preventDefault();
          fetchFolderContent(crumb.id);
        });

        breadcrumbs.appendChild(link);

        if (index < path.length - 1) {
          const separator = document.createElement('span');
          separator.textContent = ' / ';
          breadcrumbs.appendChild(separator);
        }
      });
    }

    function updateFolders(folders) {
      const foldersList = document.getElementById('folders');
      foldersList.innerHTML = '';

      folders.forEach(folder => {
        const listItem = document.createElement('li');
        const link = document.createElement('a');
        link.href = `?folderId=${folder.id}`; // Set the correct query parameter for each folder link
        link.textContent = folder.name;
        link.addEventListener('click', (event) => {
          event.preventDefault();
          fetchFolderContent(folder.id);
        });
        listItem.appendChild(link);
        foldersList.appendChild(listItem);
      });
    }

    function updateFiles(files) {
      const filesList = document.getElementById('files');
      filesList.innerHTML = '';

      files.forEach(file => {
        const listItem = document.createElement('li');
        listItem.textContent = `${file.name} (${file.size} bytes)`;
        filesList.appendChild(listItem);
      });
    }

    // Get the folderId from the query parameters on page load
    function getFolderIdFromQueryString() {
      const queryParams = new URLSearchParams(window.location.search);
      return queryParams.get('folderId');
    }

    // Initial fetch (load based on query parameter or root folder)
    document.addEventListener('DOMContentLoaded', () => {
      const initialFolderId = getFolderIdFromQueryString() || #{user.rootFolderId};
      fetchFolderContent(parseInt(initialFolderId));
    });

    const fileInput = document.getElementById('fileinput');
    const uploadButton = document.getElementById('uploadButton');

    uploadButton.addEventListener('click', () => {
      const file = fileInput.files[0];
      if (!file) {
        alert('Please select a file to upload.');
        return;
      }

      const formData = new FormData();
      formData.append('file', file);

      // Get the current folder ID from the URL
      const currentFolderId = getFolderIdFromQueryString() || #{user.rootFolderId};
      formData.append('parentId', Number(currentFolderId))

      fetch('/upload', {
        method: 'POST',
        body: formData,
      })
        .then(response => {
          if (!response.ok) {
            throw new Error('File upload failed');
          }
          return response.json();
        })
        .then(data => {
          console.log('File uploaded successfully:', data);
          // Refresh the file list after successful upload
          fetchFolderContent(currentFolderId);
        })
        .catch(error => {
          console.error('Error uploading file:', error);
          alert('Error uploading file.');
        });
    });